name: Deploy VMs

on:
  workflow_dispatch:

env:
  RESOURCE_GROUP: fd-rg
  IMAGE: Ubuntu2204
  VM_SIZE: Standard_B1s
  ADMIN_USERNAME: azureuser
  VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
  
jobs:
  create-resources:
    runs-on: ubuntu-latest
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Resource Group
      run: |
        az group create --name $RESOURCE_GROUP --location centralindia
    
    
  deploy-vms:
    needs: create-resources
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - LOCATION: centralindia
            VM_NAME: web1
          - LOCATION: eastus
            VM_NAME: web2
          - LOCATION: australiaeast
            VM_NAME: web3

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Create VM (idempotent)
      run: |
        if ! az vm show --name ${{ matrix.VM_NAME }} --resource-group $RESOURCE_GROUP &>/dev/null; then
          az vm create \
            --resource-group $RESOURCE_GROUP \
            --name ${{ matrix.VM_NAME }} \
            --image $IMAGE \
            --admin-username $ADMIN_USERNAME \
            --admin-password $VM_PASSWORD \
            --location ${{ matrix.LOCATION }} \
            --size $VM_SIZE \
            --public-ip-sku Standard \
            --authentication-type password \
            --nsg-rule SSH
         fi

         # Ensure HTTP (port 80) is also allowed
         az vm open-port --port 80 --resource-group $RESOURCE_GROUP --name ${{ matrix.VM_NAME }}
        
    

    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass
    
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get VM IPs
      run: |
          web1_IP=$(az vm show -d -g $RESOURCE_GROUP -n web1 --query publicIps -o tsv)
          web2_IP=$(az vm show -d -g $RESOURCE_GROUP -n web2 --query publicIps -o tsv)
          web3_IP=$(az vm show -d -g $RESOURCE_GROUP -n web3 --query publicIps -o tsv)
          echo "web1_IP=$web1_IP" >> $GITHUB_ENV
          echo "web2_IP=$web2_IP" >> $GITHUB_ENV
          echo "web3_IP=$web3_IP" >> $GITHUB_ENV
    
    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass
    
    - name: Deploy app files to all web VMs
      run: |
       #!/usr/bin/bash -e

       # Loop through each IP (single loop)
       for ip in $web1_IP $web2_IP $web3_IP; do
       echo "🚀 Deploying to $ip"

       # Copy index.html and images
       sshpass -p "$VM_PASSWORD" scp -o StrictHostKeyChecking=no index.html azureuser@$ip:/home/azureuser/
       sshpass -p "$VM_PASSWORD" ssh -o StrictHostKeyChecking=no azureuser@$ip "mkdir -p /home/azureuser/images"
       sshpass -p "$VM_PASSWORD" scp -o StrictHostKeyChecking=no images/* azureuser@$ip:/home/azureuser/images/

       # SSH into VM and setup
       sshpass -p "$VM_PASSWORD" ssh -o StrictHostKeyChecking=no azureuser@$ip "
       # Wait for apt lock with a timeout (max 60 seconds)
       timeout 60s bash -c 'while sudo fuser /var/lib/apt/lists/lock >/dev/null 2>&1 || sudo fuser /var/cache/apt/archives/lock >/dev/null 2>&1; do echo \"Waiting for apt lock...\"; sleep 5; done' || { echo '❌ Apt lock timeout'; exit 1; } && \
       sudo rm -f /var/cache/apt/*.bin && \
       sudo apt update && \
       sudo apt install -y jq nginx && \

       PUBLIC_IP=\$(curl -s ifconfig.me) && \
       SERVER_NAME=\$(hostname) && \
       LOCATION=\$(curl -s \"http://ipinfo.io/\$PUBLIC_IP/json\" | jq -r '.city + \", \" + .region + \", \" + .country') && \

       # --- SED DEBUGGING ---
       echo \"DEBUG: SERVER_NAME is '\$SERVER_NAME'\" && \
       echo \"DEBUG: LOCATION is '\$LOCATION'\" && \
       # --- END SED DEBUGGING ---

       # Use # as the sed delimiter
       sed \"s#***SERVER_NAME***#\$SERVER_NAME#g\" /home/azureuser/index.html > /home/azureuser/index.tmp.html && \
       sed \"s#***LOCATION***#\$LOCATION#g\" /home/azureuser/index.tmp.html > /home/azureuser/index.final.html && \

       sudo mkdir -p /var/www/html/images && \
       sudo cp /home/azureuser/index.final.html /var/www/html/index.html && \
       sudo cp /home/azureuser/images/* /var/www/html/images/ && \

       # Create cache_images.conf with cache headers
       # **IMPORTANT**: Ensure the final EOF marker below has NO leading spaces in your YAML file
       sudo tee /etc/nginx/conf.d/cache_images.conf > /dev/null <<EOF
       server {
        listen 80;
        server_name localhost;

        location /images/ {
          root /var/www/html;
          add_header Cache-Control 'public, max-age=31536000, immutable';
          access_log off;
          }
        }
       EOF

       # --- NGINX DEBUGGING (Optional) ---
       # echo \"---- DEBUG: Generated Nginx Config ----\"
       # sudo cat /etc/nginx/conf.d/cache_images.conf
       # echo \"---- END DEBUG ----\"
       # --- END NGINX DEBUGGING ---

       # Reload nginx if config is valid
       sudo nginx -t && sudo systemctl reload nginx || { echo '❌ nginx config test failed'; exit 1; }
       "
       done
